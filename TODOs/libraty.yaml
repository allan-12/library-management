openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books by release date start
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books by release date end
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1  # Valeur par défaut pour la page
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50  # Valeur par défaut pour la taille de la page
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors 
      description: Get a list of authors, optionally filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      description: Create a new author or update an existing one.
      operationId: createUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The author has been created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        404:
          description: Author not found
    delete:
      summary: Delete an author by ID
      operationId: deleteAuthorById
      parameters:
        - in: path
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Author deleted successfully
        404:
          description: Author not found
  /topics:
    get:
      summary: Get all topics
      description: Get a list of topics, optionally filtered by name.
      operationId: getTopics
      parameters:
        - in: query
          name: topicName
          description: Filter topics by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1  # Valeur par défaut pour la page
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50  # Valeur par défaut pour la taille de la page
      responses:
        200:
          description: The list of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    put:
      summary: Create or update a topic
      description: Create a new topic or update an existing one.
      operationId: createUpdateTopic
      parameters:
        - in: path
          name: topicId
          description: The ID of the topic to create or update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The topic has been created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        404:
          description: Topic not found
    delete:
      summary: Delete a topic by ID
      operationId: deleteTopicById
      parameters:
        - in: path
          name: topicId
          description: The ID of the topic to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Topic deleted successfully
        404:
          description: Topic not found
  /books/{bookId}/topics/{topicId}:
    put:
      summary: Update book's topics
      operationId: updateBookTopics
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the book to update topics
        - in: path
          name: topicId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the topic to update
      responses:
        200:
          description: Book's topics updated successfully
        404:
          description: Book or topic not found
    delete:
      summary: Remove a topic from a book
      operationId: removeBookTopic
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the book
        - in: path
          name: topicId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the topic to remove
      responses:
        204:
          description: Topic removed
        404:
          description: Book or topic not found
  /books/topics:
    get:
      summary: Get all topics for a book
      description: Get a list of topics associated with a book.
      operationId: getBookTopics
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the book to retrieve topics for
      responses:
        200:
          description: The list of topics associated with the book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        404:
          description: Book not found
  /books/{bookId}/topics:
    put:
      summary: Update book's topics in bulk
      operationId: updateBookTopicsBulk
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the book to update topics for
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: Book's topics updated successfully
        404:
          description: Book not found
    delete:
      summary: Remove all topics from a book
      operationId: removeAllBookTopics
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the book to remove topics from
      responses:
        204:
          description: All topics removed from the book
        404:
          description: Book not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Topic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        topicName:
          type: string
