openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD2201
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  releaseDateMax is not provided, releaseDateMin is ignored.
            releaseDateMin can not be after releaseDateMax.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  releaseDateMin is not provided, releaseDateMax is ignored.
            releaseDateMax can not be after releaseDateMin.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: queryPagination
          $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{booId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify the author of book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: The book id to be modified
        - name: authorId
          in: path
          required: true
          schema:
            type: string
          description: The id for the new book
      responses:
        200:
          description: Op√©ration successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrupdateBooks"
  /books/authors:
    put:
      tags:
        - Books
      summary: Update author of more books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Updating books successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UpdateBookAuthor"
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
    
        - name: pageSize
          in: query
          description: number of page in the book
          required: false
          schema:
            $ref: '#/components/parameters/queryPagination/schema/properties/pageSize'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
  /authors/page/{page}/size/{size}: 
    get:
      summary: get author per page
      operationId: getAuthorPerPage
      parameters:
        - in: path
          name: size
          required: true
          description: get an author by page and size
          schema:
            $ref: '#/components/parameters/pathPagination'
        - in: path
          name: page
          required: true
          description: get an author by page and size
          schema:
            $ref: '#/components/parameters/pathPagination' 
      responses:
        '200':
          description: list of authors
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Author'

  /books/import:
    post:
      tags:
        - Books
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/BookImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AuthorImport"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /visitors:
    get:
      tags:
        - "Visitors"
      summary: Get all visitors
      operationId: getVisitors
      responses:
        200:
          description: The list of visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visitor"
    post:
      tags:
        - "Visitors"
      summary: Create a new visitor
      operationId: createVisitor
      requestBody:
        description: Information about the new visitor
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Visitor"
      responses:
        200:
          description: The visitor has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visitor"
  /books/{bookId}/borrow:
    post:
      tags:
        - "Books"
      summary: Borrow a book
      operationId: borrowBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to borrow
          schema:
            type: string
          required: true
        - name: visitorId
          in: query
          description: ID of the visitor borrowing the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The book has been borrowed

  /books/{bookId}/return:
    post:
      tags:
        - "Books"
      summary: Return a borrowed book
      operationId: returnBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to return
          schema:
            type: string
          required: true
        - name: visitorId
          in: query
          description: ID of the visitor returning the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The book has been returned  
  /books/borrowed:
    get:
      tags:
        - Books
      summary: Get the list of borrowed books
      operationId: getBorrowedBooks
      responses:
        200:
          description: The list of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/available:
    get:
      tags:
        - Books
      summary: Get the list of available books
      operationId: getAvailableBooks
      responses:
        200:
          description: The list of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /visitors/{visitorId}/activities:
    get:
      tags:
        - "Visitors"
      summary: Get visitor activities
      operationId: getVisitorActivities
      parameters:
        - name: visitorId
          in: path
          description: ID of the visitor to retrieve activities
          schema:
            type: string
          required: true
        - name: startDate
          in: query
          description: Start date for filtering activities
          schema:
            type: string
            format: date-time  # Modification pour inclure l'heure pr√©cise
          required: false
        - name: endDate
          in: query
          description: End date for filtering activities
          schema:
            type: string
            format: date-time  # Modification pour inclure l'heure pr√©cise
          required: false
      responses:
        200:
          description: The list of activities for the visitor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VisitorActivity"
components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'

  schemas:
    VisitorActivity:
      type: object
      properties:
        bookId:
          type: string
          description: The identifier of the book involved in the activity
        bookName:
          type: string
          description: The name of the book involved in the activity
        activityType:
          type: string
          description: The type of activity (emprunt or rendu)
        activityDate:
          type: string
          format: date-time
          description: The date and time when the activity occurred
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
            - available
            - borrowed
        releaseDate:
          type: string
          format: date
    CrupdateBooks:
      allOf:
        - $ref: "#/components/schemas/Book"
        - type: object
        - required:
            - id
            - bookName
            - pageNumbers
            - topic
            - releaseDate
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    BookImport:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    AuthorImport:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum:
        - M
        - F
    Exception:
      type: object
      properties:
        status: 
          type: object
          properties:
            status_code: 
              type: string
            message:
              type: string
        body: 
          type: object
          example:
            content:
              application/json:
    ResponseSuccessfully:
      allOf:
        - $ref: '#/components/schemas/Exception'
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/Exception'
    ServerError: 
      allOf:
        - $ref: '#/components/schemas/Exception'

  parameters:
    queryPagination:
      name: queryPagination
      in: query
      description: Page number for pagination
      required: false
      schema: 
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
      
    pathPagination:
      name: pathPagination
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
